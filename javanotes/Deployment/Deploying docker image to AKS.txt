Question : How do you deploy Dockerized Java applications to a cloud provider in Azure (Microsoft Azure)
***********************************************************************************************************
Answer:
Deploying to AKS (Azure Kubernetes Service)
Push Docker Image to Azure Container Registry (ACR):

Authenticate with ACR:
az acr login --name <acr-name>

Build and push the Docker image:
docker build -t <acr-name>.azurecr.io/my-java-app:latest .
docker push <acr-name>.azurecr.io/my-java-app:latest

Deploy to AKS:

Create an AKS cluster:
az aks create --resource-group myResourceGroup --name myAKSCluster --node-count 1 --enable-addons monitoring --generate-ssh-keys

Configure kubectl to connect to the AKS cluster:
az aks get-credentials --resource-group myResourceGroup --name myAKSCluster

Create the Kubernetes manifest to deploy the Java app:

yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-java-app
spec:
  replicas: 3
  template:
    spec:
      containers:
      - name: java-container
        image: <acr-name>.azurecr.io/my-java-app:latest
        ports:
        - containerPort: 8080
		
Apply the deployment:
kubectl apply -f deployment.yaml

Scaling and Monitoring:

Use Azure Monitor and Azure Log Analytics to gather and visualize metrics for your Java application.
Set up AKS Autoscaler to scale based on workload.

************************************************************************************************************
Question: How do you manage container image versioning and rollback strategies in your cloud deployments?
************************************************************************************************************

Answer:
Managing container image versioning and rollback strategies in cloud deployments on **Azure** 
involves using best practices for tagging images, storing them in **Azure Container Registry (ACR)**, 
and leveraging **Azure Kubernetes Service (AKS)** for deployment rollbacks and updates. Here's how you 
can manage these processes effectively:

1. **Container Image Versioning

Tagging Docker Images
-Versioning Tags**: Use semantic versioning or meaningful tags for your Docker images (e.g., `1.0.0`, 
`latest`, `release-2024-10-23`). This helps you track which version is deployed and simplifies rollback if necessary.
  
  Example Docker tagging process:
  docker build -t <acr-name>.azurecr.io/my-java-app:1.0.0 .
  docker push <acr-name>.azurecr.io/my-java-app:1.0.0

- Commit SHA Tags: Optionally, tag images with the Git commit SHA for precise identification in case of 
continuous integration:
  docker build -t <acr-name>.azurecr.io/my-java-app:<commit-sha> .
  docker push <acr-name>.azurecr.io/my-java-app:<commit-sha>

- Multi-Tagging: It's common to push the same image with multiple tags (e.g., both `latest` and versioned tags). 
This allows flexibility:

  docker tag my-java-app:1.0.0 <acr-name>.azurecr.io/my-java-app:latest
  docker push <acr-name>.azurecr.io/my-java-app:latest


Storing Images in Azure Container Registry (ACR)
1. Push Images to ACR**:
   - Authenticate with ACR:
     az acr login --name <acr-name>

   - Push the versioned image:
     docker build -t <acr-name>.azurecr.io/my-java-app:1.0.0 .
     docker push <acr-name>.azurecr.io/my-java-app:1.0.0

2. **Organizing Repositories**:
   - You can organize multiple images (e.g., microservices) in ACR using different repositories, 
   each with its own set of versioned tags.

Version History
- ACR retains a history of images, including all tagged versions. You can view all versions of an image 
in the Azure Portal or using the CLI:

  az acr repository show-tags --name <acr-name> --repository my-java-app --output table


2. Rollbacks in AKS (Azure Kubernetes Service)

Deploying Specific Versions
- To deploy a specific version of your Docker image, update the `Deployment` YAML file with the desired image tag:
  yaml
  apiVersion: apps/v1
  kind: Deployment
  metadata:
    name: my-java-app
  spec:
    replicas: 3
    template:
      spec:
        containers:
        - name: java-container
          image: <acr-name>.azurecr.io/my-java-app:1.0.0
          ports:
          - containerPort: 8080

- Apply the deployment:
  kubectl apply -f deployment.yaml


Rollback Strategy
1. Kubernetes Rollout History:
   AKS, being Kubernetes-based, keeps track of the deployment history. You can view the history and rollback to 
   a previous version if necessary:
   kubectl rollout history deployment my-java-app

   This command will show a list of revisions (e.g., `revision 1`, `revision 2`), including the image version used.

2. Rollback to a Previous Version:
   If you encounter an issue with the current deployment, you can easily roll back to a previous working version:

   kubectl rollout undo deployment my-java-app --to-revision=<revision-number>

   This will switch the deployment back to a previous version, ensuring minimal downtime.

3. **Automatic Rollbacks**:
   - You can configure Kubernetes with **readiness and liveness probes**. If a new deployment fails the 
   health checks, Kubernetes will stop the rollout and revert to the previous stable version automatically.

4. **Rolling Update Strategy**:
   When performing updates, you can leverage Kubernetes' rolling update strategy (the default for AKS), 
   where a portion of the pods are updated incrementally while ensuring that the application remains available 
   during the update process:
   ```yaml
   spec:
     strategy:
       type: RollingUpdate
       rollingUpdate:
         maxSurge: 1
         maxUnavailable: 1

This configuration ensures that only one pod is updated at a time, and at least one pod remains 
available during the update.

 Scaling and Version Control
1. **Horizontal Scaling**: 
   If the demand for your application increases, you can easily scale your AKS deployment, 
   keeping the versioned image intact:
   kubectl scale deployment my-java-app --replicas=5


2. **Autoscaling**: 
   Enable autoscaling based on CPU or memory usage:
   kubectl autoscale deployment my-java-app --min=3 --max=10 --cpu-percent=80


3. **Monitoring and Alerts for Rollback Events**

- **Azure Monitor**: 
  Integrate AKS with **Azure Monitor** to track the performance of your deployments. If a new deployment 
  is underperforming, you can set up alerts to notify the team and automate rollback processes if necessary.
  
- **Container Insights**: Use **Container Insights** in Azure to monitor the health and performance of individual 
containers and visualize the status of each deployment.


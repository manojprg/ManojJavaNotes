
functional interfaces along with a basic example and some information about each:

1. **Consumer<T>**:
   - **Description**: Represents an operation that accepts a single input argument and returns no result. 
   It's typically used to perform some side-effect actions on the input.
   - **Method**: void accept(T t)
     import java.util.function.Consumer;

     public class ConsumerExample {
         public static void main(String[] args) {
             // Define a consumer to print a message
             Consumer<String> messageConsumer = (message) -> System.out.println(message);
             // Use the consumer
             messageConsumer.accept("Hello, world!");
         }
     }

2. **Supplier<T>**:
   - **Description**: Represents a supplier of results. It doesn't accept any input but produces a result of type T.
   - **Method**: T get()

     import java.util.function.Supplier;
     public class SupplierExample {
         public static void main(String[] args) {
             // Define a supplier to generate a random number
             Supplier<
			  > randomNumberSupplier = () -> Math.random();
             // Use the supplier
             double randomNumber = randomNumberSupplier.get();
             System.out.println("Random number: " + randomNumber);
         }
     }

3. **Function<T, R>**:
   - **Description**: Represents a function that accepts one argument of type T and produces a result of type R. 
   It's often used to transform data from one form to another.
   - **Method**: R apply(T t)
     import java.util.function.Function;

     public class FunctionExample {
         public static void main(String[] args) {
             // Define a function to convert a string to uppercase
             Function<String, String> toUpperCaseFunction = (str) -> str.toUpperCase();

             // Use the function
             String result = toUpperCaseFunction.apply("hello");
             System.out.println("Uppercase: " + result);
         }
     }

4. The `Predicate<T>` interface is a functional interface introduced in Java 8, located in the `java.util.function` package. 
It represents a predicate (a boolean-valued function) of one argument. It's commonly used to test conditions and 
make decisions based on those conditions.

- ** Method**: `boolean test(T t)`.
  - This method takes an argument of type T and returns a boolean value indicating whether the given argument satisfies the predicate.

- **Purpose**: Predicates are primarily used for filtering, testing, or checking conditions in various scenarios.
 For example, they can be used in collection processing operations, stream filtering, or as conditions for control flow in algorithms.

import java.util.function.Predicate;

public class PredicateExample {
    public static void main(String[] args) {
        // Predicate to check if a number is greater than 10
        Predicate<Integer> greaterThan10 = (num) -> num > 10;

        // Test the predicate
        System.out.println("Is 5 greater than 10? " + greaterThan10.test(5));
        System.out.println("Is 15 greater than 10? " + greaterThan10.test(15));
    }
} 

These functional interfaces are part of the `java.util.function` package introduced in Java 8, 
and they provide a convenient way to represent common functional constructs, such as actions, suppliers, 
and transformations, as first-class objects in Java. They are extensively used in functional programming and in the context of the Java Stream API for processing collections of data.

5. BinaryOperator: The BinaryOperator interface has an abstract method apply which takes two argument and 
returns a result of same type. Its prototype is
public interface BinaryOperator 
{
     public T apply(T x, T y);
}

Consumer vs BiConsumer interface
=======================================
A Consumer interface is a predefined functional interface that can be used when creating 
lambda expressions or method references. This interface represents an operation that accepts 
a single input parameter and doesn't return anything. It contains only one method named accept(). 
The BiConsumer interface is similar to a Consumer interface and accepts two input parameters and doesnâ€™t return anything.

Syntax
@FunctionalInterface
public interface Consumer<T>

@FunctionalInterface
public interface BiConsumer<T, U>
Example
import java.util.*;
import java.util.function.*;

public class ConsumerBiConsumerTest {
   public static void main(String[] args) {
      Consumer<String> c = (x) -> System.out.println(x.toLowerCase());  // lambda expression
      c.accept("Raja");
 
      Consumer<Integer> con = (x) -> {  // lambda expression
         System.out.println(x + 10);
         System.out.println(x - 10);
      };
      con.accept(10);

      BiConsumer<Strng, String> bc = (x, y) -> { System.out.println(x + y);};
      bc.accept("1", "2");

      List<Person> plist = Arrays.asList(new Person("RAJA"), new Person("ADITHYA"));
      acceptAllEmployee(plist, p -> System.out.println(p.name));
      acceptAllEmployee(plist, p -> {p.name = "unknown";});
      acceptAllEmployee(plist, p -> System.out.println(p.name));
   }
   public static void acceptAllEmployee(List<Person> plist, Consumer<P> con) {
      for(Person p : plist) {
         con.accept(p);
      }
   }
}

// Person class
class Person {
   public String name;
   public Person(String name) {
      this.name = name;
   }
}
Output
raja
20
0
12
RAJA
ADITHYA
unknown
unknown